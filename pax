#! /usr/bin/env python3

from enum import Enum
from sys import exit

import subprocess
import argparse


def protect_find_path(path):
    if path.startswith('-'):
        return './' + path
    else:
        return path


class PaxModeAction(argparse.Action):
    def __init__(self, option_strings, dest, const):
        if const not in {'read', 'write'}:
            raise ValueError(const)
        super().__init__(option_strings, dest, const=const, default='list', nargs=0)

    def __call__(self, parser, namespace, values, option_string=None):
        if {getattr(namespace, self.dest), self.const} == {'read', 'write'}:
            setattr(namespace, self.dest, 'copy')
        else:
            setattr(namespace, self.dest, self.const)


ap = argparse.ArgumentParser()
ap.add_argument('-r', action=PaxModeAction, const='read', dest='mode')
ap.add_argument('-w', action=PaxModeAction, const='write', dest='mode')
ap.add_argument('-a', action='store_true', default=False)
ap.add_argument('-b', type=int, metavar='blocksize')
ap.add_argument('-f', metavar='archive')
# XXX
#ap.add_argument('-H')
ap.add_argument('-i', action='store_true', default=False)
# XXX
#ap.add_argument('-k')
ap.add_argument('-l', action='store_true', default=False)
ap.add_argument('-t', action='store_true', default=False)
ap.add_argument('-v', action='store_true', default=False)
ap.add_argument('-x', metavar='format', choices={'cpio', 'pax', 'ustar'})
ap.add_argument('-X', action='store_true', default=False)

ap.add_argument('args', nargs='*')

args = ap.parse_args()
bsdcpio_args = ['bsdcpio']
bsdcpio_flag_map = {
    'a': '-A',
    'i': '-r',
    'l': '-l',
    't': '-a',
    'v': '-v',
}
bsdcpio_arg_map = {
    'b': '-B',
    'f': '-F',
    'x': '-H',
}
bsdcpio_mode_map = {
    'copy': '-p',
    'read': '-i',
    'write': '-o',
    'list': '-it'
}
bsdcpio_special_set = {
    'p', 'X', 'args', 'mode'
}

for pax_arg, pax_value in args._get_kwargs():
    if pax_arg in bsdcpio_flag_map:
        if pax_value:
            bsdcpio_args.append(bsdcpio_flag_map[pax_arg])
    elif pax_arg in bsdcpio_arg_map:
        if pax_value is not None:
            bsdcpio_args.append(bsdcpio_arg_map[pax_arg])
            bsdcpio_args.append(pax_value)
    elif pax_arg in bsdcpio_special_set:
        continue
    else:
        raise NotImplementedError((pax_arg, pax_value))

bsdcpio_args.append(bsdcpio_mode_map[args.mode])

if args.mode == 'write':
    if args.x is None:
        bsdcpio_args += ['-H', 'pax']
    if len(args.args) > 0:
        find_args = []
        bsdcpio_args.append('-d')
        if args.X:
            find_args.append('-xdev')
        find = subprocess.Popen(['find']
                                + list(map(protect_find_path, args.args))
                                + find_args,
                                stdout=subprocess.PIPE)
        bsdcpio_stdin = find.stdout
else:
    bsdcpio_stdin = None

bsdcpio = subprocess.Popen(bsdcpio_args, stdin=bsdcpio_stdin)
exit(bsdcpio.wait())
